import pytz
from datetime import datetime
from models.entities import Article, Noticia
from repository.article_repository import insertar_articulo, obtener_articulos_por_estado
from services.scraping.scraping import extraer_noticias_elperiodico, extraer_noticias_araucaniadiario
from services.file_export import guardar_en_csv, leer_desde_csv


# Constante para la zona horaria de Am√©rica/Santiago
TZ_SANTIAGO = pytz.timezone("America/Santiago")

def cargar_datos_a_db() -> None:
    """
    Carga los datos desde archivos CSV a la base de datos.
    """
    # Obtener la fecha y hora actual en la zona horaria de Santiago
    fecha_hora_actual = datetime.now(TZ_SANTIAGO)
    print(f"Fecha y hora actual en Santiago: {fecha_hora_actual}")

    # Carga de datos a DB desde csv
    diario_a: list[Noticia] = leer_desde_csv("noticias.csv")
    diario_b: list[Noticia] = leer_desde_csv("noticias2.csv")

    # Combinar ambas listas en una sola (todas las fuentes)
    diarios_data: list[Noticia] = diario_a + diario_b

    print("Cargando datos desde los archivos CSV... üìÇ")

    for noticia in diarios_data:
        print(f"Procesando noticia: {noticia.titulo}")

        # Crear el objeto Noticia
        nueva_noticia = Noticia(
            titulo=noticia.titulo,
            fecha=fecha_hora_actual.strftime("%Y-%m-%d %H:%M:%S"),
            descripcion=noticia.descripcion,
            url=noticia.url,
            fuente=noticia.fuente
        )

        # Insertar la noticia en la base de datos
        insertar_articulo(nueva_noticia)

    print("Inserci√≥n de datos completada con √©xito üöÄ")

def obtener_datos_de_db() -> list[Article]:
    """
    Obtiene art√≠culos no procesados desde la base de datos y los imprime.

    Retorna:
    - Una lista de objetos Article que no han sido procesados (IS_PROCESSED = False).
    """
    try:
        # Obtener art√≠culos no procesados
        articulos: list[Article] = obtener_articulos_por_estado(estado_procesado=False)

        if not articulos:
            print("‚ö†Ô∏è No se encontraron art√≠culos no procesados en la base de datos.")
            return []

        print(f"‚úÖ Se encontraron {len(articulos)} art√≠culos no procesados:")
        for articulo in articulos:
            print(f"- ID: {articulo.id}, T√≠tulo: {articulo.titulo}, Fecha: {articulo.fecha}")

        return articulos

    except Exception as e:
        print(f"‚ùå Error al obtener datos de la base de datos: {e}")
        return []

def procesar_articulo_con_ia(articulo: Article) -> dict:
    """
    Simula el procesamiento de un art√≠culo con un modelo de IA.

    Retorna:
    - Un diccionario con los resultados del modelo de IA.
    """
    # Simulaci√≥n de resultados del modelo de IA
    return {
        "etiquetas_ia": "noticia, pol√≠tica",
        "sentimiento": "positivo",
        "rating": 4.5,
        "nivel_riesgo": "bajo",
        "indicador_violencia": False,
        "edad_recomendada": 18,
        "model_used": "ModeloIA_v1",
        "execution_time": "2025-04-14 10:00:00",
        "is_processed": True
    }

def actualizar_articulo_en_db(articulo_id: int, datos_actualizados: dict) -> None:
    """
    Actualiza un art√≠culo en la base de datos con los datos proporcionados.

    Par√°metros:
    - articulo_id: ID del art√≠culo a actualizar.
    - datos_actualizados: Diccionario con los datos actualizados.
    """

    # Aqu√≠ se implementar√≠a la l√≥gica para actualizar el art√≠culo en la base de datos.
    print(f"üîÑ Actualizando art√≠culo ID: {articulo_id} en la base de datos con los datos: {datos_actualizados}")

def procesar_con_modelo_ia(articulos_no_procesados: list[Article]) -> None:
    """
    Procesa los art√≠culos utilizando un modelo de IA y actualiza su estado en la base de datos.

    Par√°metros:
    - articulos_no_procesados: Lista de objetos Article que no han sido procesados.
    """
    if not articulos_no_procesados:
        print("‚ö†Ô∏è No hay art√≠culos no procesados para procesar.")
        return

    print(f"‚úÖ Se encontraron {len(articulos_no_procesados)} art√≠culos no procesados. Procesando con IA...")

    for articulo in articulos_no_procesados:
        try:
            # Simular el procesamiento con un modelo de IA
            print(f"ü§ñ Procesando art√≠culo ID: {articulo.id}, T√≠tulo: {articulo.titulo}...")
            resultado_ia = procesar_articulo_con_ia(articulo)  # Llamada al modelo de IA

            # Actualizar el art√≠culo con los resultados del modelo de IA
            actualizar_articulo_en_db(articulo.id, resultado_ia)
            print(f"‚úÖ Art√≠culo ID: {articulo.id} procesado con √©xito.")

        except Exception as e:
            print(f"‚ùå Error al procesar el art√≠culo ID: {articulo.id}: {e}")
            continue  # Continuar con el siguiente art√≠culo si ocurre un error

    print("üöÄ Procesamiento con modelo de IA completado.")





def procesar_datos() -> None:
    """
    Funci√≥n principal para procesar datos desde peri√≥dicos y realizar operaciones en la base de datos.
    """
    # # Obtener informaci√≥n de peri√≥dicos
    # datos_diario_a: list[Noticia] = extraer_noticias_araucaniadiario(max_articulos=100)
    # datos_diario_b: list[Noticia] = extraer_noticias_elperiodico(max_articulos=100)

    # # Guardar informaci√≥n en CSV
    # guardar_en_csv(datos_diario_a)
    # guardar_en_csv(datos_diario_b, nombre_archivo="noticias2.csv")

    # # Cargar informaci√≥n hacia DB
    # cargar_datos_a_db()

    # Obtener datos de DB
    articulos_no_procesados: list[Article] = obtener_datos_de_db()

    # Procesar datos con modelos de IA
    procesar_con_modelo_ia(articulos_no_procesados)